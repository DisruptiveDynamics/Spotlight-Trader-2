POLYGON API REQUEST DIAGNOSTICS
================================

AUDIT DATE: October 18, 2025
ENVIRONMENT: Development (Replit)
MARKET STATUS: Outside extended hours (4 AM-8 PM ET)
DATA SOURCE: OnDemand Replay recommended for testing

NOTE: Actual Polygon API requests cannot be tested during audit because:
1. Market is closed (outside 4 AM-8 PM ET window)
2. Server automatically disables Polygon WebSocket outside trading hours
3. Authentication requires valid API key

However, code analysis reveals the request structure:

---

POLYGON AGGREGATES (BARS) API REQUEST
--------------------------------------

Base URL: https://api.polygon.io/v2/aggs/ticker/{symbol}/range/{multiplier}/{timespan}/{from}/{to}

Example constructed request for SPY 1m bars:
URL: https://api.polygon.io/v2/aggs/ticker/SPY/range/1/minute/2025-10-15T09:30:00.000-04:00/2025-10-15T16:00:00.000-04:00?adjusted=true&sort=asc&limit=50000&apiKey=****

Parameters:
- symbol: SPY
- multiplier: 1
- timespan: minute
- from: 2025-10-15T09:30:00.000-04:00 (ISO format with timezone)
- to: 2025-10-15T16:00:00.000-04:00 (ISO format with timezone)
- adjusted: true (split/dividend adjusted)
- sort: asc (ascending chronological order)
- limit: 50000 (max bars to return)
- apiKey: [MASKED - last 4: ****]

Expected Response (HTTP 200 OK):
{
  "ticker": "SPY",
  "status": "OK",
  "queryCount": 390,
  "resultsCount": 390,
  "adjusted": true,
  "results": [
    {
      "v": 1500000,     // volume
      "vw": 580.5123,   // volume-weighted average price
      "o": 580.50,      // open
      "c": 580.65,      // close
      "h": 580.75,      // high
      "l": 580.40,      // low
      "t": 1697201400000, // timestamp (ms)
      "n": 1234         // number of transactions
    },
    // ... more bars
  ]
}

Code Reference: apps/server/src/history/service.ts:200-258

---

SPY REQUEST DIAGNOSTIC
-----------------------

Constructed URL for SPY 1m bars (last 50):
https://api.polygon.io/v2/aggs/ticker/SPY/range/1/minute/{ISO_FROM}/{ISO_TO}?adjusted=true&sort=asc&limit=50&apiKey=****

Where:
- ISO_FROM = 50 minutes before current time in America/New_York timezone
- ISO_TO = current time in America/New_York timezone

Example time window (if run at 2025-10-18 13:45:00 ET):
- FROM: 2025-10-18T12:55:00.000-04:00
- TO:   2025-10-18T13:45:00.000-04:00
- Expected bars: ~50 (one per minute)

Timezone Handling (code: apps/server/src/history/service.ts:214-217):
- Uses date-fns-tz for America/New_York timezone conversion
- Converts Unix ms → ISO string with -04:00 (EDT) or -05:00 (EST) offset
- Polygon API accepts ISO format with timezone offset

POTENTIAL ISSUES:
1. If market closed: results array will be empty []
2. If outside trading hours: API returns empty with status="OK" but resultsCount=0
3. If API key invalid: HTTP 401 Unauthorized
4. If rate limited: HTTP 429 Too Many Requests

---

QQQ REQUEST DIAGNOSTIC
-----------------------

Constructed URL for QQQ 5m bars (last 50):
https://api.polygon.io/v2/aggs/ticker/QQQ/range/5/minute/{ISO_FROM}/{ISO_TO}?adjusted=true&sort=asc&limit=50&apiKey=****

Where:
- ISO_FROM = 250 minutes (5 bars × 50) before current time
- ISO_TO = current time

Example time window (if run at 2025-10-18 13:45:00 ET):
- FROM: 2025-10-18T09:35:00.000-04:00
- TO:   2025-10-18T13:45:00.000-04:00
- Expected bars: ~50 (one per 5 minutes)

POTENTIAL ISSUES:
Same as SPY above, plus:
- Multi-timeframe bars may have gaps during low-volume periods
- Pre-market/after-hours may have sparse data

---

ERROR HANDLING IN CODE
-----------------------

Location: apps/server/src/history/service.ts:230-237

Catches:
1. Empty results array → logs warning, returns []
2. API error → logs error, falls back to realistic generator
3. Network timeout → falls back to realistic generator
4. Parse error → falls back to realistic generator

Fallback behavior (generateRealisticBars):
- Generates synthetic OHLCV data with realistic volatility
- Uses seq = Math.floor(bar_start / 60000)
- Matches real bar structure exactly

Code Reference: apps/server/src/history/service.ts:260-340

---

REALISTIC FALLBACK EXAMPLE REQUEST
-----------------------------------

When Polygon API fails, system generates bars using:

Symbol: SPY
Timeframe: 1m
Count: 300 bars (5 hours of trading)
Base Price: 580.00
Volatility: 1.5% typical range per bar

Sample fallback bar:
{
  "symbol": "SPY",
  "timestamp": 1697201400000,
  "open": 580.50,
  "high": 580.75,
  "low": 580.40,
  "close": 580.65,
  "volume": 150000,
  "seq": 28286690,
  "bar_start": 1697201400000,
  "bar_end": 1697201460000
}

Note: Fallback bars use same seq calculation as real Polygon data ✅

---

VERIFICATION COMMANDS
---------------------

Test Polygon connectivity (when market open):
```bash
# Check if API key works
curl -s "https://api.polygon.io/v2/aggs/ticker/SPY/range/1/minute/2025-10-18/2025-10-18?adjusted=true&sort=asc&limit=5&apiKey=YOUR_KEY"

# Expected if key valid: JSON with status="OK"
# Expected if key invalid: JSON with status="ERROR"
```

Test history endpoint (requires auth):
```bash
curl -H "Cookie: st_auth=YOUR_JWT" \
  "http://localhost:5000/api/history?symbol=SPY&timeframe=1m&limit=20"

# Expected: JSON array of 20 bars with seq, bar_start, bar_end, ohlcv
```

Monitor server logs for Polygon requests:
```bash
# Look for these log patterns:
# "✅ Fetched {N} historical bars from Polygon for {symbol}"
# "⚠️ No historical data from Polygon for {symbol}"
# "❌ Polygon request failed: {error}"
```

---

KNOWN LIMITATIONS
-----------------

1. Market hours only: Polygon WebSocket only available 4 AM - 8 PM ET
2. Empty response common: Outside trading hours, API returns resultsCount=0
3. Rate limits: Free tier has 5 requests/minute limit
4. No caching: Each /api/history call makes fresh Polygon request
5. OnDemand preferred: For testing, use /api/replay/start instead of relying on Polygon

---

RECOMMENDATIONS
---------------

1. Add request/response logging with full URL (mask apiKey)
2. Implement response caching (Redis or in-memory) to reduce API calls
3. Add rate-limit backoff (exponential delay if 429 received)
4. Document exactly which time windows return empty results
5. Add /api/polygon/test endpoint to verify API key without auth
