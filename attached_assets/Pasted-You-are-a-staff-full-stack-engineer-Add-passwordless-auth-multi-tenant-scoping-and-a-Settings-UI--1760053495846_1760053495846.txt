You are a staff full-stack engineer. Add passwordless auth, multi-tenant scoping, and a Settings UI so each user has their own coach profile, rules, journals, memories, and signals. Keep TypeScript strict, small commits, and secure defaults.

GOALS
- Passwordless email sign-in (magic link) + dev “demo” login
- Multi-tenant scoping across all services (userId required)
- Settings UI with sliders (tone/decisiveness/jargon), voice, coach name
- API rate limiting per user
- Export/import for rules + memories (JSON)
- Minimal sessions table; JWT for client; httpOnly cookie for server
- Seed a “demo-user” path for local/POC

ENV
- Add RESEND_API_KEY or POSTMARK_TOKEN (choose Resend; fallback: dev console mail)
- Add AUTH_JWT_SECRET (HS256), SESSION_TTL=604800 (7d), MAGIC_TTL=900 (15m)

SERVER (apps/server/src)

1) db/auth schema (drizzle)
   - users (id uuid pk, email text unique, created_at timestamptz)
   - magic_links (id uuid pk, email text, token text unique, expires_at timestamptz, used boolean default false)
   - sessions (id uuid pk, user_id uuid fk users, created_at timestamptz, expires_at timestamptz)
   Migrations + models.

2) auth/mail.ts
   - sendMagicLink(email, token, redirectUrl): if RESEND_API_KEY present, send via Resend; otherwise log magic URL to server console for dev.

3) auth/jwt.ts
   - signJwt(payload { userId }, ttlSec) -> string (HS256 using AUTH_JWT_SECRET)
   - verifyJwt(token) -> payload | null

4) routes/auth.ts
   - POST /api/auth/start { email } → create magic_links row, email link: ${APP_ORIGIN}/auth/callback?token=...
   - GET  /auth/callback?token=... → verify token, create/extend session, set httpOnly cookie `sid=<jwt>` (secure + sameSite=lax), redirect to "/"
   - POST /api/auth/demo → create or fetch user "demo-user@local", issue cookie (dev only; gated by NODE_ENV)
   - GET  /api/me → returns { userId, email, profile }

5) middleware/requireUser.ts
   - Extract session JWT from cookie or Authorization: Bearer
   - Attach req.user = { id, email }
   - 401 on missing/invalid

6) multi-tenant scoping
   - Update services/routes to require userId from req.user:
     rules, journals, signals, memory, feedback, backtest (read/write)
   - Ensure queries include user_id filters; no cross-tenant leakage
   - Add Zod validation for userId when needed

7) rate limiting
   - middleware/rateLimit.ts — simple in-memory + Redis optional
     Window 10s; limits:
       /api/insight/explain: 2 req / 10s
       /api/backtest/run: 1 req / 10s
       /api/memory: 5 req / 10s
   - 429 JSON with retry-after header

8) export/import
   - routes/export.ts
     GET /api/export/all → JSON { rules, memories, coach_profile, settings } (user-scoped)
   - routes/import.ts
     POST /api/import/all with same structure → upsert by id or generate new IDs; create rule_versions entries when rules differ

9) wiring
   - Add auth routes, middleware in server bootstrap
   - Gate existing routes behind requireUser (allow /health, /ready, /api/flags public)
   - Update /api/voice/token to use req.user.id, not demo stub

CLIENT (apps/client/src)

10) auth client
   - features/auth/AuthGate.tsx → wraps app; handles:
     * If not authed: show Sign-in screen (email + “Send Magic Link” and “Try Demo”)
     * Poll /api/me for session
   - features/auth/SignIn.tsx → email form; on submit POST /api/auth/start; display “Check your email”
   - features/auth/Demo.tsx → calls POST /api/auth/demo

11) settings UI
   - features/settings/SettingsPanel.tsx
     * Coach profile: agent_name, voice, tone (select: balanced/friendly/tough)
     * Sliders: jargon (0–100), decisiveness (0–100)
     * Favorites management: add/remove symbols
     * Buttons: Export data (downloads JSON), Import data (file input → POST)
     * Save triggers PATCH /api/coach/profile
   - Add route “/settings” and a top-bar link/icon

12) client session
   - Small auth store (zustand): { user, loading } + actions login/logout
   - Read `sid` cookie is httpOnly; client fetches /api/me to know user state
   - Ensure all fetchers send credentials (fetch('/api/...',{credentials:'include'}))

13) UI polish
   - In AppShell, show user email initials in the right; click → Settings/Sign-out
   - Toasts for export/import success

TESTS

14) server tests
   - auth/jwt.test.ts, routes/auth.test.ts (start/callback/demo)
   - permissions: hit /api/memory without cookie → 401
   - export/import roundtrip retains counts and IDs (or remaps with references intact)

15) client tests
   - renders Sign-in when no session; loads app after demo login
   - Settings changes persist and reflect in /api/me

DOCS
16) README “Accounts & Settings”
   - Env: AUTH_JWT_SECRET, RESEND_API_KEY (optional)
   - Magic link flow, dev demo mode, export/import format